{"version":3,"sources":["Statistics/Statistics.js","FeedbackOptions/FeedbackOptions.js","Section/Section.js","Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Section","title","children","Notification","message","App","state","Increment","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","show","visible","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAoBeA,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,sCACO,+BAAOJ,OAEd,yCACU,+BAAOC,OAEjB,qCACM,+BAAOC,OAEb,uCACQ,+BAAOC,OAEf,mDACoB,+BAAOC,IAD3B,WCGWC,EAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,gCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALIA,MAQT,+CCPSI,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,qCACE,6BAAKD,IACJC,MCDUC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC4D3BC,E,4MArDbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPkB,UAAY,SAAAC,GACV,IAAMV,EAAOU,EAAEC,OAAOX,KACtB,EAAKY,UAAS,SAAAC,GAAS,sBACpBb,EAAOa,EAAUb,GAAQ,MAE5B,EAAKc,qBACL,EAAKC,kCACL,EAAKC,Q,EAEPF,mBAAqB,WACnB,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BrB,MAAOqB,EAAUxB,KAAOwB,EAAUvB,QAAUuB,EAAUtB,S,EAG1DwB,gCAAkC,WAChC,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAC1BpB,oBACIoB,EAAUxB,KAAOwB,EAAUvB,QAAUuB,EAAUtB,MAC9CsB,EAAUxB,KAAOwB,EAAUvB,QAAUuB,EAAUtB,KAClD,S,EAINyB,KAAO,WACL,EAAKJ,SAAS,CAAEK,SAAS,K,4CAG3B,WACE,OACE,eAAC,EAAD,CAASd,MAAM,wBAAf,UACE,cAAC,EAAD,CACER,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBsB,KAAKT,YAEtBS,KAAKV,MAAMS,SACX,cAAC,EAAD,CACE5B,KAAM6B,KAAKV,MAAMnB,KACjBC,QAAS4B,KAAKV,MAAMlB,QACpBC,IAAK2B,KAAKV,MAAMjB,IAChBC,MAAO0B,KAAKV,MAAMhB,MAClBC,mBAAoByB,KAAKV,MAAMf,sBAE7B,cAAC,EAAD,CAAca,QAAQ,6B,GAjDlBa,IAAMC,WCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5c9206ca.chunk.js","sourcesContent":["const Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <p>\r\n      Good:<span>{good}</span>\r\n    </p>\r\n    <p>\r\n      Neutral:<span>{neutral}</span>\r\n    </p>\r\n    <p>\r\n      Bad:<span>{bad}</span>\r\n    </p>\r\n    <p>\r\n      Total:<span>{total}</span>\r\n    </p>\r\n    <p>\r\n      Positive feedback:<span>{positivePercentage}</span>%\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button\r\n          key={option}\r\n          type=\"button\"\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n      <h2>Statistic</h2>\r\n    </div>\r\n  );\r\n};\r\nexport default FeedbackOptions;\r\n","const Section = ({ title, children }) => (\r\n  <>\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </>\r\n);\r\nexport default Section;\r\n","const Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  Increment = e => {\r\n    const name = e.target.name;\r\n    this.setState(prevState => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n    this.show();\r\n  };\r\n  countTotalFeedback = () => {\r\n    this.setState(prevState => ({\r\n      total: prevState.good + prevState.neutral + prevState.bad,\r\n    }));\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    this.setState(prevState => ({\r\n      positivePercentage:\r\n        ((prevState.good + prevState.neutral - prevState.bad) /\r\n          (prevState.good + prevState.neutral + prevState.bad)) *\r\n        100,\r\n    }));\r\n  };\r\n\r\n  show = () => {\r\n    this.setState({ visible: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={['good', 'neutral', 'bad']}\r\n          onLeaveFeedback={this.Increment}\r\n        />\r\n        {(this.state.visible && (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.state.total}\r\n            positivePercentage={this.state.positivePercentage}\r\n          />\r\n        )) || <Notification message=\"No feedback given\" />}\r\n      </Section>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}